pipeline {
    parameters {
        choice(name: 'terraformAction', choices: ['apply', 'destroy'], description: 'Choose the Terraform action to perform')
    } 
    environment {
        AWS_DEFAULT_REGION = 'ap-south-1'  // Specify the AWS region you're using, adjust as needed
    }

    agent any
    stages {
        stage('Checkout') {
            steps {
                script {
                    dir("terraform") {
                        git branch: 'infra', url: 'https://github.com/Preemashilpa/complete-cicd-project-6-12.git'
                    }
                }
            }
        }

        stage('Plan') {
            steps {
                script {
                    // Make sure AWS credentials are set before executing terraform commands
                    withCredentials([string(credentialsId: 'AWS_ACCESS_KEY_ID', variable: 'AWS_ACCESS_KEY_ID'),
                                     string(credentialsId: 'AWS_SECRET_ACCESS_KEY', variable: 'AWS_SECRET_ACCESS_KEY')]) {
                        // Ensure the Terraform initialization is done properly
                        sh 'pwd; cd eks/; terraform init -input=false || exit 1'

                        // Run terraform plan and capture the output to a file
                        sh 'pwd; cd eks/; terraform plan -out=tfplan || exit 1'
                        sh 'pwd; cd eks/; terraform show -no-color tfplan > tfplan.txt'
                    }
                }
            }
        }

        stage('Approval') {
            steps {
                script {
                    def plan = readFile 'eks/tfplan.txt'
                    input message: "Do you want to proceed with the Terraform action?",
                    parameters: [text(name: 'Plan', description: 'Please review the plan', defaultValue: plan)]
                }
            }
        }

        stage('Apply or Destroy') {
            when {
                expression {
                    return params.terraformAction == 'apply' || params.terraformAction == 'destroy'
                }
            }
            steps {
                script {
                    withCredentials([string(credentialsId: 'AWS_ACCESS_KEY_ID', variable: 'AWS_ACCESS_KEY_ID'),
                                     string(credentialsId: 'AWS_SECRET_ACCESS_KEY', variable: 'AWS_SECRET_ACCESS_KEY')]) {
                        if (params.terraformAction == 'apply') {
                            sh "pwd; cd eks/; terraform apply -input=false tfplan || exit 1"
                        } else if (params.terraformAction == 'destroy') {
                            sh "pwd; cd eks/; terraform destroy -auto-approve || exit 1"
                        }
                    }
                }
            }
        }
    }
}
